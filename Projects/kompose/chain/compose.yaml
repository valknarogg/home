name: chain

services:
  # n8n - Workflow Automation Engine
  n8n:
    image: ${CHAIN_N8N_IMAGE:-n8nio/n8n:latest}
    container_name: ${COMPOSE_PROJECT_NAME}_n8n
    restart: unless-stopped
    environment:
      TZ: ${TIMEZONE:-Europe/Amsterdam}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: ${CORE_DB_HOST}
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${CHAIN_N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${CORE_DB_USER}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      N8N_ENCRYPTION_KEY: ${CHAIN_N8N_ENCRYPTION_KEY}
      WEBHOOK_URL: https://${N8N_TRAEFIK_HOST}/
      GENERIC_TIMEZONE: ${TZ:-Europe/Amsterdam}
      N8N_BASIC_AUTH_ACTIVE: ${CHAIN_N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${CHAIN_N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${CHAIN_N8N_BASIC_AUTH_PASSWORD}
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      N8N_EMAIL_MODE: ${EMAIL_TRANSPORT:-smtp}
      N8N_SMTP_HOST: ${EMAIL_SMTP_HOST}
      N8N_SMTP_PORT: ${EMAIL_SMTP_PORT}
      N8N_SMTP_USER: ${EMAIL_SMTP_USER}
      N8N_SMTP_PASS: ${EMAIL_SMTP_PASSWORD}
      N8N_SMTP_SENDER: ${EMAIL_FROM}
    volumes:
      - n8n_data:/home/node/.n8n
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:${CHAIN_N8N_PORT:-5678}/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    ports:
      - "${CHAIN_N8N_PORT:-5678}:5678"
    networks:
      - kompose_network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-n8n-redirect-web-secure.redirectscheme.scheme=https'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web.middlewares=${COMPOSE_PROJECT_NAME}-n8n-redirect-web-secure'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web.rule=Host(`${N8N_TRAEFIK_HOST}`)'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web.entrypoints=web'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web-secure.rule=Host(`${N8N_TRAEFIK_HOST}`)'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web-secure.tls.certresolver=resolver'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web-secure.entrypoints=web-secure'
      - 'traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-n8n-web-secure-compress.compress=true'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-n8n-web-secure.middlewares=${COMPOSE_PROJECT_NAME}-n8n-web-secure-compress'
      - 'traefik.http.services.${COMPOSE_PROJECT_NAME}-n8n-web-secure.loadbalancer.server.port=5678'
      - 'traefik.docker.network=${NETWORK_NAME}'

  # Semaphore - Ansible UI & Task Runner
  semaphore:
    image: ${CHAIN_SEMAPHORE_IMAGE:-semaphoreui/semaphore:latest}
    container_name: ${COMPOSE_PROJECT_NAME}_semaphore
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      TZ: ${TIMEZONE:-Europe/Amsterdam}
      SEMAPHORE_DB_DIALECT: postgres
      SEMAPHORE_DB_HOST: ${CORE_DB_HOST}
      SEMAPHORE_DB_NAME: ${CHAIN_SEMAPHORE_DB_NAME:-semaphore}
      SEMAPHORE_DB_USER: ${CORE_DB_USER}
      SEMAPHORE_DB_PASS: ${DB_PASSWORD}
      SEMAPHORE_ADMIN: ${CHAIN_SEMAPHORE_ADMIN_USERNAME:-admin}
      SEMAPHORE_ADMIN_PASSWORD: ${CHAIN_SEMAPHORE_ADMIN_PASSWORD}
      SEMAPHORE_ADMIN_NAME: ${CHAIN_SEMAPHORE_ADMIN_NAME:-Admin}
      SEMAPHORE_ADMIN_EMAIL: ${ADMIN_EMAIL}
      SEMAPHORE_EMAIL_ALERT: "True"
      SEMAPHORE_EMAIL_SENDER: ${EMAIL_FROM}
      SEMAPHORE_EMAIL_HOST: ${EMAIL_SMTP_HOST}
      SEMAPHORE_EMAIL_PORT: ${EMAIL_SMTP_PORT}
      SEMAPHORE_EMAIL_USERNAME: ${EMAIL_SMTP_USER}
      SEMAPHORE_EMAIL_PASSWORD: ${EMAIL_SMTP_PASSWORD}
      SEMAPHORE_EMAIL_SECURE: "true"
    volumes:
      - semaphore_data:/var/lib/semaphore
      - semaphore_config:/etc/semaphore
      - semaphore_tmp:/tmp/semaphore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "${CHAIN_SEMAPHORE_PORT:-3000}:3000"
    networks:
      - kompose_network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-semaphore-redirect-web-secure.redirectscheme.scheme=https'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web.middlewares=${COMPOSE_PROJECT_NAME}-semaphore-redirect-web-secure'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web.rule=Host(`${SEMAPHORE_TRAEFIK_HOST}`)'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web.entrypoints=web'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web-secure.rule=Host(`${SEMAPHORE_TRAEFIK_HOST}`)'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web-secure.tls.certresolver=resolver'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web-secure.entrypoints=web-secure'
      - 'traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-semaphore-web-secure-compress.compress=true'
      - 'traefik.http.routers.${COMPOSE_PROJECT_NAME}-semaphore-web-secure.middlewares=${COMPOSE_PROJECT_NAME}-semaphore-web-secure-compress'
      - 'traefik.http.services.${COMPOSE_PROJECT_NAME}-semaphore-web-secure.loadbalancer.server.port=3000'
      - 'traefik.docker.network=${NETWORK_NAME}'

  # Semaphore Runner - Task Executor
  semaphore-runner:
    image: ${CHAIN_SEMAPHORE_RUNNER_IMAGE:-public.ecr.aws/semaphore/pro/runner:latest}
    container_name: ${COMPOSE_PROJECT_NAME}_semaphore_runner
    restart: unless-stopped
    environment:
      TZ: ${TIMEZONE:-Europe/Amsterdam}
      SEMAPHORE_RUNNER_PRIVATE_KEY_FILE: /var/lib/semaphore/runner.key
      SEMAPHORE_WEB_ROOT: http://semaphore:3000
      SEMAPHORE_RUNNER_REGISTRATION_TOKEN: ${CHAIN_SEMAPHORE_RUNNER_TOKEN}
    volumes:
      - semaphore_data:/var/lib/semaphore
      - semaphore_config:/etc/semaphore
      - semaphore_tmp:/tmp/semaphore
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/lib/semaphore/runner.key"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      semaphore:
        condition: service_healthy
    networks:
      - kompose_network

volumes:
  n8n_data:
    name: ${COMPOSE_PROJECT_NAME}_n8n_data
  semaphore_data:
    name: ${COMPOSE_PROJECT_NAME}_semaphore_data
  semaphore_config:
    name: ${COMPOSE_PROJECT_NAME}_semaphore_config
  semaphore_tmp:
    name: ${COMPOSE_PROJECT_NAME}_semaphore_tmp

networks:
  kompose_network:
    name: ${NETWORK_NAME:-kompose}
    external: true
