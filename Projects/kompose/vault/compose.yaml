# =================================================================
# VAULTWARDEN - Enhanced with Full Integration
# =================================================================
# Features:
# - Dual authentication (SSO + master password)
# - Security event publishing via MQTT
# - PostgreSQL backend (optional migration)
# - Failed login monitoring
# - Enhanced email notifications
# =================================================================

name: ${VAULT_COMPOSE_PROJECT_NAME}

services:
  vaultwarden:
    image: ${VAULT_DOCKER_IMAGE}
    container_name: ${VAULT_COMPOSE_PROJECT_NAME}_app
    restart: unless-stopped
    volumes:
      - ./bitwarden:/data:rw
      
    environment:
      TZ: ${TIMEZONE:-Europe/Amsterdam}
      
      # Admin Configuration
      ADMIN_TOKEN: ${VAULT_ADMIN_TOKEN}
      
      # Database Configuration (Optional: Migrate to PostgreSQL)
      # Uncomment to use PostgreSQL instead of SQLite
      # DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${CORE_DB_HOST}:${CORE_DB_PORT}/${VAULT_DB_NAME}
      
      # Application Settings
      WEBSOCKET_ENABLED: ${VAULT_WEBSOCKET_ENABLED}
      SIGNUPS_ALLOWED: ${VAULT_SIGNUPS_ALLOWED}
      DOMAIN: ${TRAEFIK_HOST_VAULT}
      
      # Email Configuration (via Mailhog)
      SMTP_HOST: messaging_mailhog
      SMTP_FROM: ${EMAIL_FROM}
      SMTP_PORT: 1025
      SMTP_USERNAME: ${EMAIL_SMTP_USER}
      SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD}
      SMTP_SECURITY: off
      SMTP_TIMEOUT: 15
      
      # Security Event Publishing via MQTT
      MQTT_ENABLED: ${VAULT_MQTT_ENABLED:-true}
      MQTT_BROKER: core_mqtt
      MQTT_PORT: ${CORE_MQTT_PORT}
      MQTT_TOPIC_PREFIX: kompose/vault/security
      
      # Security Settings
      PASSWORD_ITERATIONS: 350000
      ICON_CACHE_TTL: 2592000
      ICON_CACHE_NEGTTL: 259200
      
      # Log Settings
      LOG_LEVEL: info
      EXTENDED_LOGGING: true
      LOG_FILE: /data/vaultwarden.log
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${VAULT_APP_PORT}/alive || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      
    networks:
      - kompose_network
      
    labels:
      # Traefik Configuration
      - 'traefik.enable=true'
      
      # HTTP to HTTPS redirect
      - 'traefik.http.middlewares.${VAULT_COMPOSE_PROJECT_NAME}-redirect-web-secure.redirectscheme.scheme=https'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web.middlewares=${VAULT_COMPOSE_PROJECT_NAME}-redirect-web-secure'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web.rule=Host(`${TRAEFIK_HOST_VAULT}`)'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web.entrypoints=web'
      
      # HTTPS with Dual Authentication
      # Note: SSO provides access control, Vaultwarden handles vault unlocking
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web-secure.rule=Host(`${TRAEFIK_HOST_VAULT}`)'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web-secure.tls.certresolver=resolver'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web-secure.entrypoints=web-secure'
      - 'traefik.http.routers.${VAULT_COMPOSE_PROJECT_NAME}-web-secure.middlewares=sso-secure'
      - 'traefik.http.services.${VAULT_COMPOSE_PROJECT_NAME}-web-secure.loadbalancer.server.port=${VAULT_APP_PORT}'
      - 'traefik.docker.network=${NETWORK_NAME:-kompose}'
      
      # Monitoring Labels
      - 'prometheus.scrape=true'
      - 'prometheus.port=${VAULT_APP_PORT}'
      - 'prometheus.path=/metrics'
      
      # Rate Limiting for security
      - 'traefik.http.middlewares.vault-ratelimit.ratelimit.average=10'
      - 'traefik.http.middlewares.vault-ratelimit.ratelimit.burst=20'

networks:
  kompose_network:
    name: ${NETWORK_NAME:-kompose}
    external: true
