# ===================================================================
# KOMPOSE - Secrets Configuration Template
# ===================================================================
# This file contains SENSITIVE data and should NOT be committed to git.
# Ensure secrets.env is in your .gitignore file!
#
# Generate secrets with:    ./kompose.sh secrets generate
# List all secrets:         ./kompose.sh secrets list
# Validate configuration:   ./kompose.sh secrets validate
# Rotate a secret:          ./kompose.sh secrets rotate SECRET_NAME
# ===================================================================

# -------------------------------------------------------------------
# Shared Database Secrets
# -------------------------------------------------------------------
# PostgreSQL password for all database connections
# Used by: core (postgres), auth (keycloak), chain (n8n, semaphore), 
#          code (gitea), kmps, link, track, watch (grafana)
DB_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# Shared Redis Secrets
# -------------------------------------------------------------------
# Redis password for cache and session storage
# Used by: core (redis), auth (oauth2-proxy sessions), code (gitea),
#          link, track
REDIS_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Redis Commander API password for web interface
# Used by: core (redis-api)
CORE_REDIS_API_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# Shared Email/SMTP Secrets
# -------------------------------------------------------------------
# SMTP password for sending emails from all services
# Used by: chain (n8n, semaphore), code (gitea), messaging (mailhog relay), vault
# Leave empty for local development with Mailhog
EMAIL_SMTP_PASSWORD=

# -------------------------------------------------------------------
# AUTH Stack Secrets (Keycloak + OAuth2 Proxy)
# -------------------------------------------------------------------
# Keycloak admin password for web UI access
# Used by: auth (keycloak)
AUTH_KEYCLOAK_ADMIN_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# OAuth2 Proxy client secret for SSO functionality
# Generate this in Keycloak UI after creating the kompose-sso client
# Used by: auth (oauth2-proxy)
AUTH_OAUTH2_CLIENT_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# OAuth2 Proxy cookie secret (must be 32 bytes base64)
# Used by: auth (oauth2-proxy) for session encryption
AUTH_OAUTH2_COOKIE_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Generate OAuth2 cookie secret with: openssl rand -base64 32

# -------------------------------------------------------------------
# CODE Stack Secrets (Gitea)
# -------------------------------------------------------------------
# Gitea secret key for encryption and signing (64 hex chars)
# Used by: code (gitea) for various encryption operations
CODE_GITEA_SECRET_KEY=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Gitea internal token for internal API authentication (105 hex chars)
# Used by: code (gitea) for internal service communication
CODE_GITEA_INTERNAL_TOKEN=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Gitea OAuth2 JWT secret (base64)
# Used by: code (gitea) for OAuth2 token signing
CODE_GITEA_OAUTH2_JWT_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Gitea metrics token for Prometheus scraping (32 hex chars)
# Used by: code (gitea) for metrics authentication
CODE_GITEA_METRICS_TOKEN=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Gitea Actions runner token (UUID)
# Generate this in Gitea UI after first setup: Settings > Actions > Runners
# Used by: code (gitea-runner)
CODE_GITEA_RUNNER_TOKEN=CHANGE_ME_GENERATE_IN_GITEA_UI

# Generate with:
# - hex 64:  openssl rand -hex 32
# - hex 105: openssl rand -hex 52 | cut -c1-105
# - base64:  openssl rand -base64 32
# - UUID:    uuidgen | tr '[:upper:]' '[:lower:]'

# -------------------------------------------------------------------
# CHAIN Stack Secrets (n8n + Semaphore)
# -------------------------------------------------------------------
# n8n encryption key for workflow credentials storage
# Used by: chain (n8n)
CHAIN_N8N_ENCRYPTION_KEY=CHANGE_ME_GENERATE_WITH_KOMPOSE

# n8n basic auth password for web interface
# Used by: chain (n8n)
CHAIN_N8N_BASIC_AUTH_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Semaphore admin password for web interface
# Used by: chain (semaphore)
CHAIN_SEMAPHORE_ADMIN_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Semaphore runner token for task execution authentication
# Used by: chain (semaphore-runner)
CHAIN_SEMAPHORE_RUNNER_TOKEN=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# KMPS Stack Secrets (Management Portal)
# -------------------------------------------------------------------
# Keycloak client secret for KMPS admin operations
# Generate this in Keycloak UI after creating the kmps-admin client:
# 1. Go to Keycloak Admin Console
# 2. Select 'kompose' realm
# 3. Go to Clients > kmps-admin
# 4. Go to Credentials tab
# 5. Copy the Client Secret
# Used by: kmps (kmps-app)
KMPS_CLIENT_SECRET=CHANGE_ME_GENERATE_FROM_KEYCLOAK

# NextAuth secret for session encryption (32 chars)
# Used by: kmps (kmps-app)
KMPS_NEXTAUTH_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# MESSAGING Stack Secrets
# -------------------------------------------------------------------
# Gotify default user password for initial login
# Used by: messaging (gotify)
MESSAGING_GOTIFY_DEFAULTUSER_PASS=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# TRACK Stack Secrets (Umami)
# -------------------------------------------------------------------
# Umami application secret for session management
# Used by: track (umami)
TRACK_APP_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# VPN Stack Secrets (WireGuard)
# -------------------------------------------------------------------
# WireGuard web interface password
# Used by: vpn (wg-easy)
VPN_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# VAULT Stack Secrets (Vaultwarden)
# -------------------------------------------------------------------
# Admin token for Vaultwarden admin panel
# Leave commented to disable admin panel for security
# Used by: vault (vaultwarden)
VAULT_ADMIN_TOKEN=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# LINK Stack Secrets (Linkwarden)
# -------------------------------------------------------------------
# NextAuth secret for session encryption
# Used by: link (linkwarden)
LINK_NEXTAUTH_SECRET=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# PROXY Stack Secrets (Traefik)
# -------------------------------------------------------------------
# Traefik dashboard basic auth (htpasswd format)
# Generate with: htpasswd -nb admin yourpassword
# Format: username:$apr1$hash
# Used by: proxy (traefik dashboard)
PROXY_DASHBOARD_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# WATCH Stack Secrets (Monitoring)
# -------------------------------------------------------------------
# Grafana admin password for web interface
# Used by: watch (grafana)
WATCH_GRAFANA_ADMIN_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Grafana database password (separate from main DB_PASSWORD)
# Used by: watch (grafana database user)
WATCH_GRAFANA_DB_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# PostgreSQL exporter password for metrics collection
# Used by: watch (postgres-exporter)
WATCH_POSTGRES_EXPORTER_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Redis exporter password for metrics collection
# Used by: watch (redis-exporter)
WATCH_REDIS_EXPORTER_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Prometheus basic auth (htpasswd format)
# Generate with: htpasswd -nb admin yourpassword
# Used by: watch (prometheus)
WATCH_PROMETHEUS_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Loki basic auth (htpasswd format)
# Used by: watch (loki)
WATCH_LOKI_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE

# Alertmanager basic auth (htpasswd format)
# Used by: watch (alertmanager)
WATCH_ALERTMANAGER_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE

# -------------------------------------------------------------------
# Secret Generation Commands Reference
# -------------------------------------------------------------------
# The kompose.sh secrets command can automatically generate all secrets
# using the appropriate methods for each type:
#
# Generate all secrets:
#   ./kompose.sh secrets generate
#
# Generate specific secret:
#   ./kompose.sh secrets generate DB_PASSWORD
#
# Force regenerate (overwrite existing):
#   ./kompose.sh secrets generate --force
#
# List all secrets and their status:
#   ./kompose.sh secrets list
#
# List secrets for specific stack:
#   ./kompose.sh secrets list auth
#
# Validate secrets configuration:
#   ./kompose.sh secrets validate
#
# Rotate (regenerate) a specific secret:
#   ./kompose.sh secrets rotate DB_PASSWORD
#
# Manual generation commands (for reference):
#
# Random password (32 chars):
#   openssl rand -base64 48 | tr -d "=+/" | cut -c1-32
#
# Hex string (64 chars):
#   openssl rand -hex 32
#
# Hex string (105 chars):
#   openssl rand -hex 52 | cut -c1-105
#
# Base64 secret (32 bytes):
#   openssl rand -base64 32
#
# htpasswd format (basic auth):
#   htpasswd -nb admin yourpassword
#
# UUID v4:
#   uuidgen | tr '[:upper:]' '[:lower:]'
#
# ===================================================================

# -------------------------------------------------------------------
# Stack-to-Secrets Mapping
# -------------------------------------------------------------------
# For reference, here's which stacks use which secrets:
#
# SHARED:
#   - DB_PASSWORD (used by most stacks with database)
#   - REDIS_PASSWORD (used by stacks with caching)
#   - EMAIL_SMTP_PASSWORD (used by stacks sending emails)
#
# CORE:
#   - DB_PASSWORD, REDIS_PASSWORD, CORE_REDIS_API_PASSWORD
#
# AUTH:
#   - DB_PASSWORD, REDIS_PASSWORD
#   - AUTH_KEYCLOAK_ADMIN_PASSWORD
#   - AUTH_OAUTH2_CLIENT_SECRET
#   - AUTH_OAUTH2_COOKIE_SECRET
#
# CODE:
#   - DB_PASSWORD, REDIS_PASSWORD, EMAIL_SMTP_PASSWORD
#   - CODE_GITEA_SECRET_KEY
#   - CODE_GITEA_INTERNAL_TOKEN
#   - CODE_GITEA_OAUTH2_JWT_SECRET
#   - CODE_GITEA_METRICS_TOKEN
#   - CODE_GITEA_RUNNER_TOKEN
#
# CHAIN:
#   - DB_PASSWORD, EMAIL_SMTP_PASSWORD
#   - CHAIN_N8N_ENCRYPTION_KEY
#   - CHAIN_N8N_BASIC_AUTH_PASSWORD
#   - CHAIN_SEMAPHORE_ADMIN_PASSWORD
#   - CHAIN_SEMAPHORE_RUNNER_TOKEN
#
# KMPS:
#   - DB_PASSWORD
#   - KMPS_CLIENT_SECRET
#   - KMPS_NEXTAUTH_SECRET
#
# MESSAGING:
#   - EMAIL_SMTP_PASSWORD
#   - MESSAGING_GOTIFY_DEFAULTUSER_PASS
#
# TRACK:
#   - DB_PASSWORD, REDIS_PASSWORD
#   - TRACK_APP_SECRET
#
# VPN:
#   - VPN_PASSWORD
#
# VAULT:
#   - EMAIL_SMTP_PASSWORD
#   - VAULT_ADMIN_TOKEN
#
# LINK:
#   - DB_PASSWORD, REDIS_PASSWORD
#   - LINK_NEXTAUTH_SECRET
#
# PROXY:
#   - PROXY_DASHBOARD_AUTH
#
# WATCH:
#   - WATCH_GRAFANA_ADMIN_PASSWORD
#   - WATCH_GRAFANA_DB_PASSWORD
#   - WATCH_POSTGRES_EXPORTER_PASSWORD
#   - WATCH_REDIS_EXPORTER_PASSWORD
#   - WATCH_PROMETHEUS_AUTH
#   - WATCH_LOKI_AUTH
#   - WATCH_ALERTMANAGER_AUTH
#
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Security Best Practices
# -------------------------------------------------------------------
# 1. NEVER commit this file to version control
#    - Ensure secrets.env is in .gitignore
#
# 2. Use strong, unique passwords for each secret
#    - Let kompose generate them automatically
#
# 3. Rotate secrets regularly
#    - Use: ./kompose.sh secrets rotate SECRET_NAME
#    - Especially after team changes
#
# 4. Store backups securely
#    - Use: ./kompose.sh secrets backup
#    - Keep backups in a secure password manager
#
# 5. Validate secrets after changes
#    - Use: ./kompose.sh secrets validate
#
# 6. Limit access to secrets.env
#    - File permissions should be 600 (owner read/write only)
#    - Store in encrypted filesystem if possible
#
# 7. Use different secrets for different environments
#    - Don't reuse production secrets in development
#
# 8. Monitor secret usage
#    - Check which services have access to which secrets
#    - Use: ./kompose.sh secrets list STACK_NAME
#
# ===================================================================
