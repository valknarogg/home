name: proxy

services:
  traefik:
    image: ${DOCKER_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_app
    restart: unless-stopped
    command:
      # API & Dashboard
      - '--api.dashboard=true'
      - '--api.insecure=false'
      
      # Logging
      - '--log.level=${LOG_LEVEL:-INFO}'
      - '--accesslog=true'
      
      # Global
      - '--global.sendAnonymousUsage=false'
      - '--global.checkNewVersion=true'
      
      # Docker Provider
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.network=${NETWORK_NAME}'
      
      # File Provider for dynamic configuration
      - '--providers.file.directory=/etc/traefik/dynamic'
      - '--providers.file.watch=true'
      
      # Entrypoints
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web-secure.address=:443'
      
      # Global HTTP to HTTPS redirect
      - '--entrypoints.web.http.redirections.entryPoint.to=web-secure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
      - '--entrypoints.web.http.redirections.entryPoint.permanent=true'
      
      # Let's Encrypt
      - '--certificatesresolvers.resolver.acme.tlschallenge=true'
      - '--certificatesresolvers.resolver.acme.email=${ADMIN_EMAIL}'
      - '--certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json'
      # Uncomment for testing to avoid rate limits
      # - '--certificatesresolvers.resolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory'
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    networks:
      - kompose_network
    
    ports:
      - "80:80"
      - "443:443"
      # Dashboard only accessible from localhost
      - "127.0.0.1:8080:8080"
    
    volumes:
      - /var/local/data/traefik/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./dynamic:/etc/traefik/dynamic:ro
    
    labels:
      - 'traefik.enable=true'
      
      # ================================================================
      # Traefik Dashboard (Internal Access Only)
      # ================================================================
      - 'traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOST_PROXY}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))'
      - 'traefik.http.routers.dashboard.entrypoints=web-secure'
      - 'traefik.http.routers.dashboard.tls=true'
      - 'traefik.http.routers.dashboard.tls.certresolver=resolver'
      - 'traefik.http.routers.dashboard.service=api@internal'
      # Apply internal-only + basic auth middlewares
      - 'traefik.http.routers.dashboard.middlewares=internal-only,dashboard-auth,security-headers'
      
      # Basic Auth for Dashboard
      - 'traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}'

networks:
  kompose_network:
    name: ${NETWORK_NAME}
    external: true
