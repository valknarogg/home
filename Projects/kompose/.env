# ===================================================================
# KOMPOSE - Production Configuration
# ===================================================================
# This file is for LOCAL DEVELOPMENT ONLY
# Copy to .env for local development: cp .env.production .env
# Or use: ./kompose.sh prod:start
# ===================================================================

# -------------------------------------------------------------------
# Domain Configuration
# -------------------------------------------------------------------
# Load local domain configuration
[ -f "$(dirname "${BASH_SOURCE[0]:-$0}")/domain.env.local" ] && source "$(dirname "${BASH_SOURCE[0]:-$0}")/domain.env.local" 2>/dev/null || true

# Build local URLs (using localhost with ports)
TRAEFIK_HOST_PROXY=localhost:8080
TRAEFIK_HOST_AUTH=localhost:8180
TRAEFIK_HOST_AUTO=localhost:3000
TRAEFIK_HOST_BLOG=localhost:3002
TRAEFIK_HOST_CHAIN=localhost:5678
TRAEFIK_HOST_CHAT=localhost:8085
TRAEFIK_HOST_MAIL=localhost:8025
TRAEFIK_HOST_CODE=localhost:3001
TRAEFIK_HOST_DASH=localhost:3006
TRAEFIK_HOST_DATA=localhost:3005
TRAEFIK_HOST_DOCK=localhost:5000
TRAEFIK_HOST_DOCS=localhost:3003
TRAEFIK_HOST_HOME=localhost:8123
TRAEFIK_HOST_LINK=localhost:3009
TRAEFIK_HOST_NEWS=localhost:3004
TRAEFIK_HOST_SEXY=localhost:8055
TRAEFIK_HOST_TRACE=localhost:3008
TRAEFIK_HOST_TRACK=localhost:3007
TRAEFIK_HOST_VAULT=localhost:8081
TRAEFIK_HOST_VPN=localhost:51821
TRAEFIK_HOST_OAUTH2=localhost:4180
TRAEFIK_HOST_MANAGE=localhost:3100
TRAEFIK_HOST_ZIGBEE=localhost:8080

# -------------------------------------------------------------------
# Global Settings
# -------------------------------------------------------------------
# Network name used by all stacks
NETWORK_NAME=kompose

# Default timezone
TIMEZONE=Europe/Amsterdam

# Admin email (local)
ADMIN_EMAIL=dev@localhost

# Email/SMTP Settings (disabled for local)
EMAIL_TRANSPORT=smtp
EMAIL_FROM=dev@localhost
EMAIL_SMTP_HOST=localhost
EMAIL_SMTP_PORT=1025
EMAIL_SMTP_USER=dev@localhost

# Disable Traefik by default for local dev
TRAEFIK_ENABLED=false

# ===================================================================
# CORE STACK CONFIGURATION
# ===================================================================
CORE_COMPOSE_PROJECT_NAME=core

# PostgreSQL Configuration
CORE_POSTGRES_IMAGE=postgres:16-alpine
DB_USER=kompose
CORE_DB_NAME=kompose
CORE_DB_PORT=5432
CORE_DB_HOST=core-postgres  # Container name for inter-container communication
CORE_POSTGRES_MAX_CONNECTIONS=100
CORE_POSTGRES_SHARED_BUFFERS="256MB"

# Redis Configuration
CORE_REDIS_IMAGE=redis:7-alpine
CORE_REDIS_PORT=6379

# Mosquitto MQTT Configuration
CORE_MOSQUITTO_IMAGE=eclipse-mosquitto:2
CORE_MQTT_PORT=1883
CORE_MQTT_WS_PORT=9001

# Redis Commander (Web UI)
CORE_REDIS_COMMANDER_IMAGE=rediscommander/redis-commander:latest
CORE_REDIS_API_USER=admin
CORE_REDIS_API_PORT=8081
CORE_REDIS_API_TRAEFIK_HOST=localhost:8081

# ===================================================================
# AUTH STACK CONFIGURATION
# ===================================================================
AUTH_COMPOSE_PROJECT_NAME=auth

# Keycloak Configuration
AUTH_DOCKER_IMAGE=quay.io/keycloak/keycloak:latest
AUTH_DB_NAME=keycloak
AUTH_KEYCLOAK_ADMIN_USERNAME=admin
AUTH_KC_HTTP_PORT=8180  # Direct port for local access

# OAuth2 Proxy Configuration (Optional for local)
AUTH_OAUTH2_PROXY_HOST=localhost:4180
AUTH_OAUTH2_CLIENT_ID=kompose-sso

# ===================================================================
# KMPS STACK CONFIGURATION
# ===================================================================
KMPS_COMPOSE_PROJECT_NAME=kmps
KMPS_DB_NAME=kmps
KMPS_TRAEFIK_HOST=localhost:3100
KMPS_APP_PORT=3100
KMPS_API_PORT=8080
KMPS_API_HOST=0.0.0.0

# Keycloak Client Configuration
KMPS_CLIENT_ID=kmps-admin
KMPS_REALM=kompose

# ===================================================================
# HOME STACK CONFIGURATION
# ===================================================================
HOME_COMPOSE_PROJECT_NAME=home

# Home Assistant Configuration
HOME_HOMEASSISTANT_IMAGE=ghcr.io/home-assistant/home-assistant:stable
HOME_HOMEASSISTANT_PORT=8123

# Matter Server Configuration
HOME_MATTER_SERVER_IMAGE=ghcr.io/home-assistant-libs/python-matter-server:stable

# Zigbee2MQTT Configuration
HOME_ZIGBEE2MQTT_IMAGE=koenkk/zigbee2mqtt:latest
HOME_ZIGBEE2MQTT_PORT=8080

# ESPHome Configuration
HOME_ESPHOME_IMAGE=ghcr.io/esphome/esphome:stable

# ===================================================================
# VPN STACK CONFIGURATION
# ===================================================================
VPN_COMPOSE_PROJECT_NAME=vpn

# WireGuard Configuration
VPN_WG_HOST=localhost
VPN_WG_PORT=51820
VPN_WG_PERSISTENT_KEEPALIVE=25
VPN_WG_DEFAULT_DNS=1.1.1.1,1.0.0.1
VPN_WG_DEFAULT_ADDRESS=10.8.0.x
VPN_WG_ALLOWED_IPS=10.8.0.0/24
VPN_WG_MTU=1420

# ===================================================================
# MESSAGING STACK CONFIGURATION
# ===================================================================
MESSAGING_COMPOSE_PROJECT_NAME=messaging

# Gotify Configuration
MESSAGING_GOTIFY_IMAGE=gotify/server:latest
MESSAGING_GOTIFY_PORT=8085
MESSAGING_GOTIFY_TRAEFIK_HOST=localhost:8085

# ===================================================================
# CHAIN STACK CONFIGURATION
# ===================================================================
CHAIN_COMPOSE_PROJECT_NAME=chain

# n8n Configuration
CHAIN_N8N_IMAGE=n8nio/n8n:latest
CHAIN_N8N_PORT=5678
CHAIN_N8N_DB_NAME=n8n
CHAIN_N8N_BASIC_AUTH_USER=admin
CHAIN_N8N_WEBHOOK_URL=http://localhost:5678

# Semaphore Configuration
CHAIN_SEMAPHORE_IMAGE=semaphoreui/semaphore:latest
CHAIN_SEMAPHORE_PORT=3000
CHAIN_SEMAPHORE_DB_NAME=semaphore
CHAIN_SEMAPHORE_ADMIN_USERNAME=admin

# ===================================================================
# CODE STACK CONFIGURATION
# ===================================================================
CODE_COMPOSE_PROJECT_NAME=code

# Gitea Configuration
CODE_GITEA_IMAGE=gitea/gitea:latest
CODE_GITEA_PORT_HTTP=3001
CODE_GITEA_PORT_SSH=2222
CODE_GITEA_DB_NAME=gitea
CODE_GITEA_APP_NAME="Kompose Git (Local)"
CODE_GITEA_RUN_MODE=dev

# Gitea Actions Runner Configuration
CODE_RUNNER_IMAGE=gitea/act_runner:latest

# ===================================================================
# PROXY STACK CONFIGURATION (Optional for local)
# ===================================================================
PROXY_COMPOSE_PROJECT_NAME=proxy

# Traefik Configuration
PROXY_TRAEFIK_IMAGE=traefik:latest
PROXY_TRAEFIK_PORT_HTTP=80
PROXY_TRAEFIK_PORT_HTTPS=443
PROXY_TRAEFIK_PORT_DASHBOARD=8080
PROXY_TRAEFIK_LOG_LEVEL=DEBUG
PROXY_TRAEFIK_ACME_EMAIL=dev@localhost

# ===================================================================
# CUSTOM/UTILITY STACKS CONFIGURATION
# ===================================================================

# Blog Stack
BLOG_COMPOSE_PROJECT_NAME=blog
BLOG_TRAEFIK_HOST=localhost:3002

# Sexy Stack (Directus)
SEXY_COMPOSE_PROJECT_NAME=sexy
SEXY_TRAEFIK_HOST=localhost:8055
SEXY_DB_NAME=directus
SEXY_ADMIN_EMAIL=admin@localhost

# Link Stack
LINK_COMPOSE_PROJECT_NAME=link
LINK_TRAEFIK_HOST=localhost:3009
LINK_DB_NAME=linkwarden

# News Stack
NEWS_COMPOSE_PROJECT_NAME=news
NEWS_TRAEFIK_HOST=localhost:3004
NEWS_DB_NAME=letterspace

# Track Stack (Umami)
TRACK_COMPOSE_PROJECT_NAME=track
TRACK_TRAEFIK_HOST=localhost:3007
TRACK_DB_NAME=umami

# Vault Stack (Vaultwarden)
VAULT_COMPOSE_PROJECT_NAME=vault
VAULT_TRAEFIK_HOST=localhost:8081
VAULT_DB_NAME=vaultwarden
VAULT_SIGNUPS_ALLOWED=true
VAULT_INVITATIONS_ALLOWED=true
VAULT_SHOW_PASSWORD_HINT=true

# ===================================================================
# WATCH STACK CONFIGURATION (Monitoring & Observability)
# ===================================================================
WATCH_COMPOSE_PROJECT_NAME=watch

# Prometheus - Metrics Collection
WATCH_PROMETHEUS_IMAGE=prom/prometheus:latest
WATCH_PROMETHEUS_RETENTION=30d
WATCH_PROMETHEUS_PORT=9090

# Grafana - Metrics Visualization
WATCH_GRAFANA_IMAGE=grafana/grafana:latest
WATCH_GRAFANA_ADMIN_USER=admin
WATCH_GRAFANA_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel
WATCH_GRAFANA_DB_NAME=grafana
WATCH_GRAFANA_DB_USER=grafana
WATCH_GRAFANA_PORT=3010

# OpenTelemetry Collector
WATCH_OTEL_IMAGE=otel/opentelemetry-collector-contrib:latest
WATCH_OTEL_GRPC_PORT=4317
WATCH_OTEL_HTTP_PORT=4318
WATCH_OTEL_HEALTH_PORT=13133
WATCH_OTEL_ZPAGES_PORT=55679

# PostgreSQL Exporter
WATCH_POSTGRES_EXPORTER_IMAGE=prometheuscommunity/postgres-exporter:latest
WATCH_POSTGRES_EXPORTER_USER=kompose
WATCH_POSTGRES_EXPORTER_DB=kompose
WATCH_POSTGRES_EXPORTER_PORT=9187

# Redis Exporter
WATCH_REDIS_EXPORTER_IMAGE=oliver006/redis_exporter:latest
WATCH_REDIS_EXPORTER_PORT=9121

# MQTT Exporter
WATCH_MQTT_EXPORTER_IMAGE=kpetrem/mqtt-exporter:latest
WATCH_MQTT_EXPORTER_TOPIC=#
WATCH_MQTT_V5_PROTOCOL=False
WATCH_MQTT_EXPORTER_PORT=9000

# cAdvisor - Container Metrics
WATCH_CADVISOR_IMAGE=gcr.io/cadvisor/cadvisor:latest
WATCH_CADVISOR_PORT=8082

# Node Exporter - Host Metrics
WATCH_NODE_EXPORTER_IMAGE=prom/node-exporter:latest

# Blackbox Exporter - Endpoint Monitoring
WATCH_BLACKBOX_EXPORTER_IMAGE=prom/blackbox-exporter:latest
WATCH_BLACKBOX_EXPORTER_PORT=9115

# Loki - Log Aggregation
WATCH_LOKI_IMAGE=grafana/loki:latest
WATCH_LOKI_PORT=3100

# Promtail - Log Collector
WATCH_PROMTAIL_IMAGE=grafana/promtail:latest
WATCH_PROMTAIL_PORT=9080

# Alertmanager - Alert Management
WATCH_ALERTMANAGER_IMAGE=prom/alertmanager:latest
WATCH_ALERTMANAGER_PORT=9093

# NOTE: Secrets are stored in root secrets.env file
# Available secrets for this stack:
#   - WATCH_PROMETHEUS_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_GRAFANA_ADMIN_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_GRAFANA_DB_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_POSTGRES_EXPORTER_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_REDIS_EXPORTER_PASSWORD=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_LOKI_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE
#   - WATCH_ALERTMANAGER_AUTH=CHANGE_ME_GENERATE_WITH_KOMPOSE

# ===================================================================
# Local Development Notes
# ===================================================================
# 1. Services accessible directly via ports (no domain routing)
# 2. No SSL/TLS - everything runs on HTTP
# 3. Traefik is optional (set TRAEFIK_ENABLED=true if needed)
# 4. Database host is localhost for direct connection
# 5. Simplified authentication (no OAuth2 Proxy by default)
#
# To activate this configuration:
#   cp .env.production .env
#   cp domain.env.local domain.env
#   OR use: ./kompose.sh prod:start
#
# Services will be available at:
#   - PostgreSQL: localhost:5432
#   - Redis: localhost:6379
#   - Keycloak: http://localhost:8180
#   - KMPS: http://localhost:3100
#   - Gitea: http://localhost:3001
#   - n8n: http://localhost:5678
#   - Home Assistant: http://localhost:8123
#   - etc.
# ===================================================================

# Messaging Stack - Missing Variables
MESSAGING_MAILHOG_PORT=8025
MESSAGING_MAILHOG_IMAGE=mailhog/mailhog:latest
MESSAGING_GOTIFY_IMAGE=gotify/server:latest


# ===================================================================
# IMPORTANT NOTES
# ===================================================================
# This file has been automatically updated by fix-env-production.sh
#
# ⚠️ REMAINING WORK NEEDED:
# 1. Update compose.yaml files to use prefixed variables:
#    - core/compose.yaml: POSTGRES_IMAGE → CORE_POSTGRES_IMAGE
#    - auth/compose.yaml: DOCKER_IMAGE → AUTH_DOCKER_IMAGE
#    - messaging/compose.yaml: GOTIFY_IMAGE → MESSAGING_GOTIFY_IMAGE
#    - vpn/compose.yaml: DOCKER_IMAGE → VPN_DOCKER_IMAGE
#
# 2. Review and test each stack deployment
#
# 3. See ENV_VERIFICATION_REPORT.md for complete details
# ===================================================================

# ===================================================================
# AUTH CHAIN CODE CORE HOME KMPS LINK MESSAGING PROXY TRACK VAULT VPN WATCH BLOG NEWS SEXY STACK CONFIGURATION
# ===================================================================
AUTH CHAIN CODE CORE HOME KMPS LINK MESSAGING PROXY TRACK VAULT VPN WATCH BLOG NEWS SEXY_COMPOSE_PROJECT_NAME=auth chain code core home kmps link messaging proxy track vault vpn watch blog news sexy


# =============================================================================
# STACK ENVIRONMENT VARIABLES
# =============================================================================
# Auto-generated environment variables for all stacks.
# These are non-secret configuration values with sensible defaults.
# To customize, edit the values below or create stack-specific .env files.
# 
# For secrets (passwords, tokens, keys), use secrets.env instead.
# =============================================================================


# -----------------------------------------------------------------------------
# GLOBAL CONFIGURATION
# -----------------------------------------------------------------------------
# System timezone for all containers
# [REQUIRED]
TIMEZONE=Europe/Amsterdam

# Docker network name for inter-service communication
# [REQUIRED]
NETWORK_NAME=kompose

# Base domain for all services (e.g., example.com)
# [REQUIRED]
BASE_DOMAIN=

# Administrator email address for notifications
# [REQUIRED]
ADMIN_EMAIL=

# Node.js environment mode
NODE_ENV=production

# Default sender email address
# [REQUIRED]
EMAIL_FROM=noreply@example.com

# Email transport protocol
EMAIL_TRANSPORT=smtp


# -----------------------------------------------------------------------------
# CORE STACK - Database, Cache, Message Broker
# -----------------------------------------------------------------------------
# Core stack project name
# [REQUIRED]
CORE_COMPOSE_PROJECT_NAME=core

# PostgreSQL Docker image
CORE_POSTGRES_IMAGE=postgres:16-alpine

# PostgreSQL host (container name)
# [REQUIRED]
CORE_DB_HOST=core_postgres

# PostgreSQL port
# [REQUIRED]
CORE_DB_PORT=5432

# Main database name
# [REQUIRED]
CORE_DB_NAME=kompose

# Maximum PostgreSQL connections
CORE_POSTGRES_MAX_CONNECTIONS=100

# PostgreSQL shared memory buffers
CORE_POSTGRES_SHARED_BUFFERS=256MB

# Redis Docker image
CORE_REDIS_IMAGE=redis:7-alpine

# Redis host (container name)
# [REQUIRED]
CORE_REDIS_HOST=core_redis

# Redis port
# [REQUIRED]
CORE_REDIS_PORT=6379

# MQTT broker Docker image
CORE_MOSQUITTO_IMAGE=eclipse-mosquitto:2

# MQTT broker port
# [REQUIRED]
CORE_MQTT_PORT=1883

# MQTT WebSocket port
CORE_MQTT_WS_PORT=9001

# Redis Commander Docker image
CORE_REDIS_COMMANDER_IMAGE=rediscommander/redis-commander:latest

# Redis Commander web UI port
CORE_REDIS_API_PORT=8081

# Redis web UI hostname (e.g., redis.example.com)
CORE_REDIS_API_TRAEFIK_HOST=


# -----------------------------------------------------------------------------
# PROXY STACK - Traefik Reverse Proxy
# -----------------------------------------------------------------------------
# Proxy stack project name
# [REQUIRED]
PROXY_COMPOSE_PROJECT_NAME=proxy

# Traefik Docker image
PROXY_DOCKER_IMAGE=traefik:latest

# Traefik log level (DEBUG, INFO, WARN, ERROR)
PROXY_LOG_LEVEL=INFO

# HTTP port
# [REQUIRED]
PROXY_PORT_HTTP=80

# HTTPS port
# [REQUIRED]
PROXY_PORT_HTTPS=443

# Traefik dashboard port (localhost only)
PROXY_PORT_DASHBOARD=8080

# Traefik dashboard hostname (e.g., proxy.example.com)
TRAEFIK_HOST_PROXY=


# -----------------------------------------------------------------------------
# AUTH STACK - Keycloak SSO & OAuth2
# -----------------------------------------------------------------------------
# Auth stack project name
# [REQUIRED]
AUTH_COMPOSE_PROJECT_NAME=auth

# Keycloak Docker image
AUTH_DOCKER_IMAGE=quay.io/keycloak/keycloak:latest

# Keycloak database name
# [REQUIRED]
AUTH_DB_NAME=keycloak

# Keycloak hostname (e.g., auth.example.com)
# [REQUIRED]
TRAEFIK_HOST_AUTH=

# OAuth2 client ID for SSO
# [REQUIRED]
AUTH_OAUTH2_CLIENT_ID=kompose-sso

# OAuth2 proxy hostname (e.g., sso.example.com)
# [REQUIRED]
TRAEFIK_HOST_OAUTH2=


# -----------------------------------------------------------------------------
# CODE STACK - Gitea Git Repository
# -----------------------------------------------------------------------------
# Code stack project name
# [REQUIRED]
CODE_COMPOSE_PROJECT_NAME=code

# Gitea Docker image
CODE_GITEA_IMAGE=gitea/gitea:latest

# Gitea user ID
CODE_GITEA_UID=1000

# Gitea group ID
CODE_GITEA_GID=1000

# Gitea hostname (e.g., git.example.com)
# [REQUIRED]
TRAEFIK_HOST_CODE=

# Gitea database name
# [REQUIRED]
CODE_GITEA_DB_NAME=gitea

# Gitea SSH port for git operations
# [REQUIRED]
CODE_GITEA_PORT_SSH=2222

# Gitea HTTP port (internal)
CODE_GITEA_PORT_HTTP=3001

# Disable user registration
CODE_GITEA_DISABLE_REGISTRATION=false

# Require sign-in to view content
CODE_GITEA_REQUIRE_SIGNIN=false

# Require email confirmation for registration
CODE_GITEA_EMAIL_CONFIRM=false

# Allowed hosts for webhooks
CODE_GITEA_WEBHOOK_ALLOWED_HOSTS=*

# Skip TLS verification for webhooks
CODE_GITEA_WEBHOOK_SKIP_TLS=false

# Gitea log level (Trace, Debug, Info, Warn, Error)
CODE_GITEA_LOG_LEVEL=Info

# Gitea Actions runner Docker image
CODE_GITEA_RUNNER_IMAGE=gitea/act_runner:latest

# Gitea Actions runner name
CODE_GITEA_RUNNER_NAME=kompose-runner-1

# Runner labels for Actions
CODE_GITEA_RUNNER_LABELS=ubuntu-latest:docker://node:16-bullseye


# -----------------------------------------------------------------------------
# KMPS STACK - Management Portal
# -----------------------------------------------------------------------------
# KMPS stack project name
# [REQUIRED]
KMPS_COMPOSE_PROJECT_NAME=kmps

# KMPS Docker image
KMPS_DOCKER_IMAGE=node:20-alpine

# KMPS API server port
# [REQUIRED]
KMPS_API_PORT=8080

# KMPS API server host
KMPS_API_HOST=0.0.0.0

# Kompose project root directory
# [REQUIRED]
KOMPOSE_ROOT=/home/valknar/Projects/kompose

# Keycloak realm name
# [REQUIRED]
KMPS_REALM=kompose

# Keycloak admin client ID
# [REQUIRED]
KMPS_CLIENT_ID=kmps-admin

# KMPS portal hostname (e.g., manage.example.com)
# [REQUIRED]
TRAEFIK_HOST_MANAGE=

# KMPS database name
# [REQUIRED]
KMPS_DB_NAME=kmps

# KMPS web application port
KMPS_APP_PORT=3100


# -----------------------------------------------------------------------------
# MESSAGING STACK - Gotify & Mailhog
# -----------------------------------------------------------------------------
# Messaging stack project name
# [REQUIRED]
MESSAGING_COMPOSE_PROJECT_NAME=messaging

# Gotify Docker image
MESSAGING_GOTIFY_IMAGE=gotify/server:latest

# Gotify default admin username
# [REQUIRED]
MESSAGING_GOTIFY_DEFAULTUSER_NAME=admin

# Gotify port
MESSAGING_GOTIFY_PORT=8085

# Gotify hostname (e.g., chat.example.com)
# [REQUIRED]
TRAEFIK_HOST_CHAT=

# Mailhog Docker image
MESSAGING_MAILHOG_IMAGE=mailhog/mailhog:latest

# Enable outgoing SMTP relay
MESSAGING_MAILHOG_OUTGOING_SMTP_ENABLED=false

# SMTP host for outgoing email
# [REQUIRED]
EMAIL_SMTP_HOST=messaging_mailhog

# SMTP port
# [REQUIRED]
EMAIL_SMTP_PORT=1025

# Mailhog hostname (e.g., mail.example.com)
# [REQUIRED]
TRAEFIK_HOST_MAIL=

# Mailhog web UI port
MESSAGING_MAILHOG_PORT=8025


# -----------------------------------------------------------------------------
# TRACK STACK - Umami Analytics
# -----------------------------------------------------------------------------
# Track stack project name
# [REQUIRED]
TRACK_COMPOSE_PROJECT_NAME=track

# Umami Docker image
TRACK_DOCKER_IMAGE=ghcr.io/umami-software/umami:postgresql-latest

# Umami database name
# [REQUIRED]
TRACK_DB_NAME=umami

# Umami hostname (e.g., analytics.example.com)
# [REQUIRED]
TRAEFIK_HOST_TRACK=

# Enable MQTT real-time events
MQTT_ENABLED=true


# -----------------------------------------------------------------------------
# VPN STACK - WireGuard
# -----------------------------------------------------------------------------
# VPN stack project name
# [REQUIRED]
VPN_COMPOSE_PROJECT_NAME=vpn

# WireGuard Easy Docker image
VPN_DOCKER_IMAGE=ghcr.io/wg-easy/wg-easy:latest

# WireGuard public hostname or IP
# [REQUIRED]
VPN_WG_HOST=

# WireGuard UDP port
# [REQUIRED]
VPN_WG_PORT=51820

# WG-Easy web UI port
# [REQUIRED]
VPN_APP_PORT=51821

# WG-Easy UI language
VPN_LANG=en

# Show traffic statistics in UI
VPN_UI_TRAFFIC_STATS=true

# Chart type for traffic stats (0=Line, 1=Area, 2=Bar)
VPN_UI_CHART_TYPE=0

# Allowed IPs for VPN clients
VPN_WG_ALLOWED_IPS=0.0.0.0/0, ::/0

# Default client IP address template
VPN_WG_DEFAULT_ADDRESS=10.8.0.x

# Default DNS server for VPN clients
VPN_WG_DEFAULT_DNS=1.1.1.1

# WireGuard keepalive interval
VPN_WG_PERSISTENT_KEEPALIVE=25

# WireGuard MTU size
VPN_WG_MTU=1420

# WG-Easy web UI hostname (e.g., vpn.example.com)
# [REQUIRED]
TRAEFIK_HOST_VPN=


# -----------------------------------------------------------------------------
# CHAIN STACK - n8n & Semaphore Automation
# -----------------------------------------------------------------------------
# Chain stack project name
# [REQUIRED]
CHAIN_COMPOSE_PROJECT_NAME=chain

# n8n Docker image
CHAIN_N8N_IMAGE=n8nio/n8n:latest

# n8n database name
# [REQUIRED]
CHAIN_N8N_DB_NAME=n8n

# n8n hostname (e.g., workflow.example.com)
# [REQUIRED]
TRAEFIK_HOST_CHAIN=

# Enable n8n basic authentication
CHAIN_N8N_BASIC_AUTH_ACTIVE=true

# n8n basic auth username
# [REQUIRED]
CHAIN_N8N_BASIC_AUTH_USER=admin

# n8n web UI port
CHAIN_N8N_PORT=5678

# Semaphore Docker image
CHAIN_SEMAPHORE_IMAGE=semaphoreui/semaphore:latest

# Semaphore database name
# [REQUIRED]
CHAIN_SEMAPHORE_DB_NAME=semaphore

# Semaphore admin username
# [REQUIRED]
CHAIN_SEMAPHORE_ADMIN_USERNAME=admin

# Semaphore admin display name
CHAIN_SEMAPHORE_ADMIN_NAME=Admin

# Semaphore hostname (e.g., auto.example.com)
# [REQUIRED]
TRAEFIK_HOST_AUTO=

# Semaphore web UI port
CHAIN_SEMAPHORE_PORT=3000

# Semaphore runner Docker image
CHAIN_SEMAPHORE_RUNNER_IMAGE=public.ecr.aws/semaphore/pro/runner:latest


# -----------------------------------------------------------------------------
# HOME STACK - Home Assistant
# -----------------------------------------------------------------------------
# Home stack project name
# [REQUIRED]
HOME_COMPOSE_PROJECT_NAME=home

# Home Assistant Docker image
HOME_HOMEASSISTANT_IMAGE=ghcr.io/home-assistant/home-assistant:stable

# Home Assistant web UI port
HOME_HOMEASSISTANT_PORT=8123

# Home Assistant hostname (e.g., home.example.com)
# [REQUIRED]
TRAEFIK_HOST_HOME=

# Matter server Docker image
HOME_MATTER_SERVER_IMAGE=ghcr.io/home-assistant-libs/python-matter-server:stable

# Zigbee2MQTT Docker image
HOME_ZIGBEE2MQTT_IMAGE=koenkk/zigbee2mqtt:latest

# Zigbee2MQTT web UI port
HOME_ZIGBEE2MQTT_PORT=8080

# Zigbee2MQTT hostname (e.g., zigbee.example.com)
TRAEFIK_HOST_ZIGBEE=

# ESPHome Docker image
HOME_ESPHOME_IMAGE=ghcr.io/esphome/esphome:stable


# -----------------------------------------------------------------------------
# LINK STACK - Linkwarden Bookmarks
# -----------------------------------------------------------------------------
# Link stack project name
# [REQUIRED]
LINK_COMPOSE_PROJECT_NAME=link

# Linkwarden Docker image
LINK_DOCKER_IMAGE=ghcr.io/linkwarden/linkwarden:latest

# Linkwarden database name
# [REQUIRED]
LINK_DB_NAME=linkwarden

# Linkwarden hostname (e.g., links.example.com)
# [REQUIRED]
TRAEFIK_HOST_LINK=

# Linkwarden web UI port
LINK_APP_PORT=3000

# Disable automatic screenshots
LINK_DISABLE_SCREENSHOT=false

# Disable automatic archiving
LINK_DISABLE_ARCHIVE=false

# Disable user registration
LINK_DISABLE_REGISTRATION=false


# -----------------------------------------------------------------------------
# VAULT STACK - Vaultwarden Password Manager
# -----------------------------------------------------------------------------
# Vault stack project name
# [REQUIRED]
VAULT_COMPOSE_PROJECT_NAME=vault

# Vaultwarden Docker image
VAULT_DOCKER_IMAGE=vaultwarden/server:latest

# Vaultwarden database name (optional)
VAULT_DB_NAME=vaultwarden

# Vaultwarden hostname (e.g., vault.example.com)
# [REQUIRED]
TRAEFIK_HOST_VAULT=

# Enable WebSocket support
VAULT_WEBSOCKET_ENABLED=true

# Allow new user registrations
VAULT_SIGNUPS_ALLOWED=false

# Vaultwarden web UI port
VAULT_APP_PORT=80

# Enable MQTT security event publishing
VAULT_MQTT_ENABLED=true


# -----------------------------------------------------------------------------
# WATCH STACK - Monitoring & Observability
# -----------------------------------------------------------------------------
# Watch stack project name
# [REQUIRED]
WATCH_COMPOSE_PROJECT_NAME=watch

# Prometheus Docker image
WATCH_PROMETHEUS_IMAGE=prom/prometheus:latest

# Prometheus data retention period
WATCH_PROMETHEUS_RETENTION=30d

# Prometheus web UI port
WATCH_PROMETHEUS_PORT=9090

# Prometheus hostname (e.g., prometheus.example.com)
# [REQUIRED]
TRAEFIK_HOST_PROMETHEUS=

# Grafana Docker image
WATCH_GRAFANA_IMAGE=grafana/grafana:latest

# Grafana admin username
# [REQUIRED]
WATCH_GRAFANA_ADMIN_USER=admin

# Grafana plugins to install
WATCH_GRAFANA_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel

# Grafana database name
# [REQUIRED]
WATCH_GRAFANA_DB_NAME=grafana

# Grafana database user
# [REQUIRED]
WATCH_GRAFANA_DB_USER=grafana

# Grafana web UI port
WATCH_GRAFANA_PORT=3010

# Grafana hostname (e.g., grafana.example.com)
# [REQUIRED]
TRAEFIK_HOST_GRAFANA=

# OpenTelemetry Collector Docker image
WATCH_OTEL_IMAGE=otel/opentelemetry-collector-contrib:latest

# OTLP gRPC receiver port
WATCH_OTEL_GRPC_PORT=4317

# OTLP HTTP receiver port
WATCH_OTEL_HTTP_PORT=4318

# OpenTelemetry health check port
WATCH_OTEL_HEALTH_PORT=13133

# OpenTelemetry zPages extension port
WATCH_OTEL_ZPAGES_PORT=55679

# PostgreSQL Exporter Docker image
WATCH_POSTGRES_EXPORTER_IMAGE=prometheuscommunity/postgres-exporter:latest

# PostgreSQL exporter database user
# [REQUIRED]
WATCH_POSTGRES_EXPORTER_USER=kompose

# PostgreSQL exporter database name
# [REQUIRED]
WATCH_POSTGRES_EXPORTER_DB=kompose

# PostgreSQL exporter metrics port
WATCH_POSTGRES_EXPORTER_PORT=9187

# Redis Exporter Docker image
WATCH_REDIS_EXPORTER_IMAGE=oliver006/redis_exporter:latest

# Redis exporter metrics port
WATCH_REDIS_EXPORTER_PORT=9121

# MQTT Exporter Docker image
WATCH_MQTT_EXPORTER_IMAGE=kpetrem/mqtt-exporter:latest

# MQTT topics to monitor
WATCH_MQTT_EXPORTER_TOPIC=#

# Use MQTT v5 protocol
WATCH_MQTT_V5_PROTOCOL=False

# MQTT exporter metrics port
WATCH_MQTT_EXPORTER_PORT=9000

# cAdvisor Docker image
WATCH_CADVISOR_IMAGE=gcr.io/cadvisor/cadvisor:latest

# cAdvisor web UI port
WATCH_CADVISOR_PORT=8082

# Node Exporter Docker image
WATCH_NODE_EXPORTER_IMAGE=prom/node-exporter:latest

# Blackbox Exporter Docker image
WATCH_BLACKBOX_EXPORTER_IMAGE=prom/blackbox-exporter:latest

# Blackbox exporter port
WATCH_BLACKBOX_EXPORTER_PORT=9115

# Loki Docker image
WATCH_LOKI_IMAGE=grafana/loki:latest

# Loki API port
WATCH_LOKI_PORT=3100

# Loki hostname (e.g., loki.example.com)
TRAEFIK_HOST_LOKI=

# Promtail Docker image
WATCH_PROMTAIL_IMAGE=grafana/promtail:latest

# Promtail metrics port
WATCH_PROMTAIL_PORT=9080

# Alertmanager Docker image
WATCH_ALERTMANAGER_IMAGE=prom/alertmanager:latest

# Alertmanager web UI port
WATCH_ALERTMANAGER_PORT=9093

# Alertmanager hostname (e.g., alerts.example.com)
TRAEFIK_HOST_ALERTMANAGER=


# -----------------------------------------------------------------------------
# DOCS STACK - Documentation Site
# -----------------------------------------------------------------------------
# Docs stack project name
# [REQUIRED]
COMPOSE_PROJECT_NAME=docs

# Static web server Docker image
DOCKER_IMAGE=joseluisq/static-web-server:latest

# Documentation hostname (e.g., docs.example.com)
# [REQUIRED]
TRAEFIK_HOST=

