name: Kompose Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make scripts executable
        run: |
          chmod +x __tests/*.sh
      
      - name: Run unit tests
        run: |
          cd __tests
          ./run-all-tests.sh
      
      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-logs
          path: __tests/temp/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Make scripts executable
        run: |
          chmod +x __tests/*.sh
      
      - name: Create Docker network
        run: |
          docker network create kompose || true
      
      - name: Run integration tests
        run: |
          cd __tests
          ./run-all-tests.sh -i
      
      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: __tests/temp/
      
      - name: Clean up Docker resources
        if: always()
        run: |
          docker compose -f core/compose.yaml down -v || true
          docker network rm kompose || true

  snapshot-validation:
    name: Validate Snapshots
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make scripts executable
        run: |
          chmod +x __tests/*.sh
      
      - name: Check snapshot consistency
        run: |
          cd __tests
          # Verify snapshots exist
          if [ ! -d "snapshots" ] || [ -z "$(ls -A snapshots/*.snapshot 2>/dev/null)" ]; then
            echo "ERROR: No snapshots found!"
            echo "Run 'UPDATE_SNAPSHOTS=1 ./run-all-tests.sh' to generate snapshots"
            exit 1
          fi
          
          # Verify snapshots match current output
          ./run-all-tests.sh
      
      - name: Report snapshot mismatches
        if: failure()
        run: |
          echo "::error::Snapshots do not match current output"
          echo "::error::Review changes and update snapshots if intentional"
          echo "::error::Run: UPDATE_SNAPSHOTS=1 ./run-all-tests.sh"
