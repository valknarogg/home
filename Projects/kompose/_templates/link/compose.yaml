# =================================================================
# LINKWARDEN - Enhanced with Full Integration
# =================================================================
# Features:
# - SSO authentication via Keycloak
# - Redis caching for performance
# - MQTT event publishing
# - Prometheus metrics
# - Enhanced security headers
# =================================================================

name: ${LINK_COMPOSE_PROJECT_NAME}

services:
  linkwarden:
    image: ${LINK_DOCKER_IMAGE}
    container_name: ${LINK_COMPOSE_PROJECT_NAME}_app
    restart: unless-stopped
    environment:
      TZ: ${TIMEZONE:-Europe/Amsterdam}
      
      # Database Configuration
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${CORE_DB_HOST}:${CORE_DB_PORT}/${LINK_DB_NAME}
      
      # Authentication
      NEXTAUTH_SECRET: ${LINK_NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${PROTOCOL}://${SUBDOMAIN_LINK}${ROOT_DOMAIN:+.${ROOT_DOMAIN}}
      
      # Redis Cache Integration
      REDIS_URL: redis://${CORE_REDIS_HOST}:${CORE_REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Application Settings
      NEXT_PUBLIC_PAGINATION_TAKE_COUNT: 20
      STORAGE_FOLDER: /data/archives
      NEXT_PUBLIC_DISABLE_SCREENSHOT: ${LINK_DISABLE_SCREENSHOT}
      NEXT_PUBLIC_DISABLE_ARCHIVE: ${LINK_DISABLE_ARCHIVE}
      NEXT_PUBLIC_DISABLE_REGISTRATION: ${LINK_DISABLE_REGISTRATION}
      
      # Email Configuration (via Mailhog)
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_SERVER: smtp://${EMAIL_SMTP_USER}:${EMAIL_SMTP_PASSWORD}@messaging_mailhog:1025
      
      # MQTT Event Publishing
      MQTT_ENABLED: ${MQTT_ENABLED:-true}
      MQTT_BROKER: core_mqtt
      MQTT_PORT: ${CORE_MQTT_PORT}
      MQTT_TOPIC_PREFIX: kompose/linkwarden
      
    volumes:
      - linkwarden_data:/data/archives
      - ./metrics:/app/metrics  # For custom metrics export
      
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:${LINK_APP_PORT}/api/healthcheck || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    networks:
      - kompose_network
      
    labels:
      # Traefik enabled/disabled per service
      - 'traefik.enable=${TRAEFIK_ENABLED_LINK:-false}'
      
      # HTTP to HTTPS redirect (only for production when PROTOCOL=https)
      - 'traefik.http.middlewares.${LINK_COMPOSE_PROJECT_NAME}-redirect-web-secure.redirectscheme.scheme=${PROTOCOL}'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web.middlewares=${LINK_COMPOSE_PROJECT_NAME}-redirect-web-secure'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web.rule=Host(`${SUBDOMAIN_LINK}${ROOT_DOMAIN:+.${ROOT_DOMAIN}}`)'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web.entrypoints=web'
      
      # Secure configuration (HTTPS in production, HTTP in local)
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web-secure.rule=Host(`${SUBDOMAIN_LINK}${ROOT_DOMAIN:+.${ROOT_DOMAIN}}`)'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web-secure.tls.certresolver=${PROTOCOL:+resolver}'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web-secure.tls=${PROTOCOL:+true}'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web-secure.entrypoints=web-secure'
      - 'traefik.http.routers.${LINK_COMPOSE_PROJECT_NAME}-web-secure.middlewares=sso-secure'
      
      # Load balancer configuration
      - 'traefik.http.services.${LINK_COMPOSE_PROJECT_NAME}-web-secure.loadbalancer.server.port=${LINK_APP_PORT}'
      - 'traefik.docker.network=${NETWORK_NAME}'
      
      # Monitoring Labels
      - 'prometheus.scrape=true'
      - 'prometheus.port=9100'
      - 'prometheus.path=/metrics'

volumes:
  linkwarden_data:
    name: ${LINK_COMPOSE_PROJECT_NAME}_linkwarden_data

networks:
  kompose_network:
    name: ${NETWORK_NAME}
    external: true
